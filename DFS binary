;node left right
(define myTree
  (list 53
        (list 23
              (list 11 '() '())
              (list 4 '()  '())
              )
        (list 17 '() '())
        ))
;function to define root of tree
(define (root tree) (first tree))
;function to find left node of tree
(define (left tree)(first (rest tree)))
;find right node of tree
(define (right tree)(first (rest (rest tree))))

(define (count atree)(if (empty? atree) 0
                         (+(count (left atree))
                           (count (right atree))
                           1)))
(count (right myTree))

(define (DFS atree anode)(if (empty? atree) 0
                             (if (>( DFS (left atree) anode) 0)
                                 (DFS (left atree) anode)
                                 (if (>(DFS (right atree) anode) 0)
                                     (DFS (right atree) anode)
                                     (if (= anode (root atree)) (count atree)
                                         0)))))
(DFS myTree 4)
(DFS myTree 441)
(DFS myTree 24)
(DFS myTree 23)
(DFS myTree 11)
